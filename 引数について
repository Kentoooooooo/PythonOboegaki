🔵引数について
・仮引数と実引数の2種類がある
・実引数には、キーワード引数と位置引数がある
  **を使って、キーワード引数がかける
  *を使って位置引数が書ける
  
・仮引数 
  関数定義で使われる。実際のオブジェクトに仮の名前を付けて扱うので仮引数と呼ばれる
  仮引数にデフォルト値が設定してあれば、関数呼び出しの際に実引数を省略できる。

・実引数
  関数呼び出しで使われる。実際のオブジェクトなので実引数と呼ばれる。

🔵色々な実引数
・キーワード引数
  real=のように識別子が付いた引数
  辞書に**が付いた引数
・位置引数
  キーワード引数以外の引数
  リストのように反復できるものに*を付けた引数
※ 位置引数とキーワード引数は組み合わせらるが、位置引数はキーワード引数の前に書かないといけない。

🔵print関数を使った説明。
・print(*args, **kwargs)という書き方について
  
  *argsは、位置引数と呼ばれる実引数の種類になる。argsはリストのようにイテラブルでないといけない。
  **kwargsは、キーワード引数と呼ばれる実引数の種類になる。kwargsは辞書でないといけない。（キーワードで指定するから）
  
  args = [1, 2, 3]のとき
  print(*args)はprint(1, 2, 3)と同じになる。
  *によりargsがアンパックされるから。
  
  kwargs = {sep: ',', end: ''}（辞書）だとするとprint(**kwargs)はprint(sep=',', end='')と同じになる。
  **により辞書がアンパックされる。
  print(*ars, **kwargs)はprint(1, 2, 3, sep=',', end='')になる
  
  
🔵*args, **kwargsを使った例
args = [1, 2, 3]
kwargs = {'sep': '-', 'end': '.'}  辞書

print(*args, **kwargs)
# 1-2-3.
※ printのキーワード引数にはsepとendがある。 ⇒ 辞書をアンパックしてして利用することにより、プリセットのキーワード引数を利用できる。

🔵キーワードのみの仮引数
def func2(arg, *, kw_only1=2, kw_only2):
  pass # 省略
のように関数を定義する。argは位置引数またはキーワード引数として実引数を利用できる。

「*」はどんな意味？ ⇒ 後ろの引数をキーワード引数でしか利用できなくなる
ということは、func2(1, 2, 3)のようにするとkw_only1とkw_only2を位置引数として利用しようとしているのでエラーになる。

  
🔵可変長位置と可変長キーワード
・可変長位置：任意の個数の位置引数を受けとれる。
  可変長位置の場合は、関数定義の際に*argsみたいな感じで*をつければいい。
  
・可変長キーワード：任意の個数のキーワード引数を受け取れる
  可変長キーワードの場合は、関数定義の際に**kwargsみたいに**をつければよい
  
  キーワード引数として実引数を受け取ると、受け取ったkwargsは辞書型になる。
  
🔵コラム

リストや辞書などを仮引数のデフォルトに指定するのは、避けた方が良い。
何が起こるでしょうか？

def append_and_print_list(msg, args=[]):
    args.append(msg)
    print(args)
append_and_print_list('first')
append_and_print_list('second', [])
append_and_print_list('third')

# ['first']                ← まずfirstで実行
# ['second']               ← argsを空のリストにする。
# ['first', 'third']       ← ！！？？？ なぜかsecondが入ると思われるところにfirstが入っている。
これはなぜだろうか？

・仮引数のデフォルト値の代入は、定義時に一度だけ実行される。
・引数を省略して呼び出すと、定義時のオブジェクトが使われる。
  定義と1番目と3番目のargsは、同じリストが使いまわされている。
  3番目の実行では、1番目で追加された'first'が存在しているので['first', 'third']が出力される。
・2番目は、別のリストになるので['second']だけ出力される。

・これが、意図していない動作の場合は、以下のようにNoneなどをデフォルト値とし、デフォルト値の場合に別途初期化すると良い。
def append_and_print_list(msg, args=None):
  if args is None:
    args = []
  args.append(msg)
  print(args)




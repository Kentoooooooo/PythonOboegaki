🔵継承(Inheritance)
  クラス間に親子関係を定義できる。あるクラスの情報を引き継いで、新しいクラスを生成できる。
  # クラスの継承のやり方、動作イメージを掴もう
class A:
    def __init__(self):
        self.name = 'Class A'

class B(A):        ← 継承するときには  子クラス名（親クラス名）のように記述する
    pass

b = B()

print(b.name)


🔵継承が便利なのは同盟のメソッドを追加していくとき。
・オーバーライド
  継承では同じメソッドがあると、内容を上書きして差し替えることが可能。
  class A:
    def hello(self):
      print('Class A says Hello')
  
  class B(A):
    def hello(self):
      print('Class B says Hello')
      
  b = B()
  b.hello()    ← 「Class B says Hello」と表示される
まず、自分自身の定義が先で、なかったら親を探しに行くようなイメージ。

・super関数
  親クラスのメソッドに、子クラスからアクセスするときに使うのが、super関数。
  
  super().親クラスのメソッド(引数）のように記述する
  
  下記の例では、Aクラスのhelloを呼び出してから、Bクラスのhelloを呼び出している。
  Class B(A):
    def hello(self):
      super().hello()                    ← 親クラスのメソッドの呼び出し
      print('Class B Says Hello')


🔵オブジェクトのデータメンバとメソッドの一覧
  あるオブジェクトのデータメンバとメソッドのリストはdir(オブジェクト)として取得できる
  print(dir(b))とすると、下記のように出力され、オブジェクトbにnameがあることが確認できる
  ['__class__', 中略, 'name']
  
🔵オーバーライドはオブジェクト指向の肝
  アプリケーション全体としての制約を設けておいて、ローカルルールも定義できるという恰好。
  こうしておくと、柔軟に変更に対応できる設計になる。
  
  関数の上書きができる・・・ただそれだけで、プログラムの表現力が大きく異なる。
  

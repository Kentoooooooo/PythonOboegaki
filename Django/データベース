🔵データベースの利用
  DjangoはORM(Object=Relational Mapping)を使ってデータベースの操作をする。
  
  ・今回のデータベース
    myproject/db.sqlite3にある。設定方法は後日
    
🔵モデルの確認
  myproject/garden/models.pyにデータの定義が記述されている。
  ・このファイルに記述されているクラスを「モデル」と呼ぶ
  
  ・各クラスには要素の定義がある。
    例：Vegetableクラス
    名前name, 値段price, 説明description, 生産者producer, 売り切れsold_out, 登録日created_at
    それに加えてクラスには書かれていないけど、idという主キーフィールドも持っている（Djangoが自動で設定する）
    名前も自動で生成される一意なキー
   
🔵モデルの利用
  モデルVegetableから、データの一覧を取得する。
  ・from garden.models import Vegetableを記述して、Vegetableをインポートする
  ・vegetables = Vegetable.objects.all()でデータの取得
  ・TemplateResponse()の第三引数に取得したvegetablesをレスポンスのコンテキストとして渡す
  
🔵データの表示
  画面にループを用いて、一覧を表示する。テンプレートを変更する。
  
  ・テンプレートfor文を利用するには{%  %}で囲む。
  ・forの最後にセミコロンは必要ない
  ・ループ処理の終わりに(%  endfor %} を書く
  
  ・index.html ------------------------------------------------
    <h3>おいしいとれたての野菜</h3>
    <ul>
      {% for vegetable in vegetables % }    ← View関数によって与えられたvegetablesの要素に対してfor文を実行
      <li>
        {{ vegetable.name }}                ← vegetabnleモデルのnameを表示
      </li>
      {% endfor %}                          ←  endfor で閉じる
    </ul>
  ・views.py ------------------------------------------------
    from random import choice
    from django.template.response import TemplateResponse
    
    from garden.models import Vegetable          ← モデルを定義しているクラスからVegetableモデルをインポート
    
    name = 'ウメ'
    sub_titles = ['おいしいよ', 'お買い得！'......]
    
    def index(request):
      title = name + 'の野菜'
      
      vegetables = Vegetable.objects.all()        ← モデルオブジェクトのobjects.all()を利用してデータベースからVegetableモデルの要素をすべて引っ張る
      
      sub_titele = choice(sub_titles)             ← from random import choiceとしているのでchoiseメソッド単体で利用している。
      
      return TemplateResponse(request, 'garden/index.html',
                              {'title': title,
                              'sub_title': sub_title,
                              'vegetables': vegetables,
                              })
                              
🔵Vegetable.objects.all()
  データはdjango.db.models.query.QuerySet型で取得される。
  リストのようにVegetableオブジェクトが データベースからの取得順に格納されている。
  
  Vegetableオブジェクトの各要素はオブジェクト名.要素名で取得できる。vegetable.nameで名前に保存されている値を取得できる
  
🔵オブジェクト取得の際のソート
  Vegetable.objects.all()
  を
  Vegetable.objects.order_by('-created_at')
  のように変更するとソートできる。
  
  カラムの前にハイフン(-)を書くと降順、何も書かないと昇順に並ぶ
  Vegetable.objects.order_by('created_at') # asc
  Vegetable.objects.order_by('-created_at') # desc
                              

                              
                              

🔵ゴールが明確になる
  テストが書かれていれば処理の正解を明確に示すことができる。
  違う人が見てもその機能の期待する結果を知ることができる

🔵何度でも使える
  テストコードのプログラムは何度も再利用できる。
  テストがプログラム化されていると大変便利（たぶん利用するようになってからわかる）
  
🔵プログラムが洗練される
  テストコードを書きにくいプログラムは良くない
  良いプログラムは責務が明確！ ⇒ テストも明確になる。
  
🔵デグレを防げる
  修正したら、今まで正常に動作していた機能に不具合が出た。というケースが多くある。
  デグレード：今までできたことができなくなる。
  
  テストコードで正常時の動作を定めておけば、「この関数はこういうことをやればよい」という実行結果を保証できる
  ⇒ デグレ防ぐことができる。
  
🔵ユニットテスト（単体テスト）
  テストコードは、そのプログラムで利用されている関数をテストするのが基本！
  
  関数を最小処理単位として扱い、「戻り値」と想定される「期待値」の2つを比較して、意図された結果になっていることで
  正しいかどうかを判断できる。
  
🔵ユニットテストの書き方
  Pythonにはユニットテストをサポートするモジュール「unittest」モジュールが用意されている
  
  ・unittestのポイント
    unittestモジュールをimportする
    unittest.TestCaseを継承してクラスを作る ※慣例としてTestをクラスの頭につける
    関数名の頭にtest_をつける ※これでテストが実行される
    assetEqual等で比較して、テスト内容を検証する
--------------------------------------------------------------------------
import unittest #unittestをimportする


# テスト対象のplus関数
def plus(a, b):
    return a + b


# テストプログラム
class TestPlus(unittest.TestCase):#unittestのTestCaseを継承してクラスを作る

    def test_plus(self):#テスト用の関数を作る
        """関数plusが２つの引数の合計を返すかのテスト."""
        self.assertEqual(10, plus(2, 8))#比較用の関数を利用して同じ結果が返ってくるか試す
---------------------------------------------------------------------------------------

🔵設計にはまず仕様の理解を
  プログラムを書く際には「仕様」がとても大切
  
  特に以下のことに注目して使用を理解しよう
  ・どんなデータが存在するのか
  ・どんなデータを作るべきなのか
  ・どんな処理が必要なのか
  ※ 「データの入出力と処理」を常に意識する。
  
🔵仕様を元に処理の「まとまり」をイメージする
  仕様をについて考えつつ、プログラムでやるべきことを考える。
  ・売上生データと商品マスターデータを読み込む
  ・売上生データの「商品ID」から「商品名」と「商品価格」を取得し、含める
  ・売上データとして出力する
  
  必要になりそうな処理の「まとまり」をイメージする
  ・対象の年月の売上生データを読み込む処理の「まとまり」
  ・商品マスターデータを読み込む処理の「まとまり」
  ・商品IDから商品（商品名、商品価格）を取得する処理の「まとまり」
  ・売上データを作成する処理の「まとまり」
  ・売上データを書きだす処理の「まとまり」
  ※ 要するに、「データの入出力と処理」を意識して必要な処理を洗い出す。
  
🔵初めの変更
    1．input/items.csvを読み込んでいるwith文を分離する
    2．「商品マスターデータ」を後で使いやすい形にしておく
    
    CSVファイルから読み込んだ商品マスターデータを辞書に変換しておく。
    キーが「商品ID」で、valueが「商品名」、「商品価格」の辞書を作成する
    
    ※ 辞書を作っておくことにより、後で処理を行うときに役立つ。
    
🔵2の変更
  「売上データを書きだす処理」を分割して、まとめる
  with文のなかにwith文が入っているとわかりずらい
  
  ⇒ 「目的のデータを作る処理」と「ファイルに書き出す処理」にまとまりを分離する
  
🔵3つ目の変更
  辞書への格納の際にどのような順序でデータが入っているかが一目でわからない。
  
  ⇒ 辞書をappendするようにする。
    売上データを書きだす処理で、その辞書を解釈して正しい順序でCSVに書き出す。
30	                        sales.append({
31	                            'purchase_id': data[0],
32	                            'user_id': data[1],
33	                            'item_id': item_id,
34	                            'item_name': items[item_id]['name'],
35	                            'item_price': items[item_id]['price'],
36	                            'amount': data[3],
37	                            'sold_at': data[4],
38	                        })
    
    
    まとめたデータのリストを作って、それをもとに代入していく
       # まとめた売上データを書き出し
41	    columns = ['purchase_id', 'user_id', 'item_id',
42	               'item_name', 'item_price', 'amount', 'sold_at']
43	    with open('output/sales.csv', mode='w', encoding='utf-8') as f:
44	        for row in sales:
45	            row_str = ','.join(str(row[column]) for column in columns)
46	            f.write(row_str + '\n')
    ※ 売上データ書き込み時のcolumnsリストを見るだけで「売上データCSV」に値がどんな順番で入っているかが一目瞭然
    
🔵売上生データの読み込みがイマイチ
  現状の売上生データを読み込む処理では「売上生データのファイル名はどんな名前か」がとても分かりにくい
  ⇒ 「売上生データのファイル名」にマッチする正規表現を書くことでプログラムを読みやすくする。
  
import os
import re

SALES_RAW_REGEX = re.compile(r'^sales_raw_(\d{4})(\d{2})(\d{2}).csv$')
※ 正規表現を事前に書くことで、ファイル名の仕様がとても見やすくなる。

m = SALES_RAW_REGEX.search("sales_raw_20141105.csv")
print(m.group(1))  # '2014'
print(m.group(2))  # '11'
print(m.group(3))  # '05'
※ グループとかで対象の年とかを引っ張り出せる

if m and m.group(1) == '2016' and m.group(2) == '11':
※ 上記のfi文で対象のファイル化を判定している。
正規表現にマッチした
対象の年が'2016'
対象の月が'11'
  
  

🔵関数もオブジェクトなので、変数に代入して使える
def fib(n):   例えばｎ未満のフィボナッチ数列を出力する関数fibがあったとする
  ...
  return OOO

f = fib   ここでオブジェクトとしての関数fibを変数fに代入する
f(1000)   作成したオブジェクトに引数として関数fを実行する

🔵スコープについての話
関数内でグローバル変数iをi = 456みたいな感じで代入っぽい操作をすると
pythonの場合はローカル変数としてiが再定義されていることになる
⇒再びグローバルな領域で表示すると値が書き換わっていない。

関数内でグローバル変数と同じ名前の変数を宣言する場合は一番最初に行わないとエラーになる
exp)
i = 123
def func1();
  i = 456
  print(i)  # 456 再定義されたiが出力される

print(i)  # 123 グローバル変数としてのiが出力される

def func2():
  print(i) 
  i = 456 # エラー グローバル変数を関数内で利用したのにグローバル変数と同じ名前のローカル変数を定義しようとしている。

def func3():
  global i # グローバル変数のiを利用するよってことを宣言している
  i = 456 # グローバル変数iを直接書き換えていることを意味する
  print(i) # 456

print(i) # 456 func3内でグローバル変数iの値を直接書き換えているので出力の結果が変化している。


🔵キーワード引数
関数を定義する際に引数の名前やデフォルト値を指定できる。
デフォルト値を設定した後の引数はすべてデフォルト値を設定しないといけない。

def func(arg1, arg2=2, arg3=3):  ←arg1はデフォルト値を設定しなくていいけど、arg2でデフォルト値を設定しているのでarg3は設定する
    print(arg1, arg2, arg3)


func(10, 20, 30)  # 10 20 30
func(10, 20)  # 10 20 3   ←arg3のデフォルト値が反映される
func(arg1=10)  # 10 2 3   ←arg1だけを指定して関数を実行している
func(10, arg3=30)  # 10 2 30  ←arg3を指定して関数を実行している

🔵任意の個数の引数
引数に*をつけることで任意個数の引数を関数へ入力できる

def func(*args):
    print(args) ＃('hello', 'world')  ← タプルで受け取るためそのまま出力すると丸カッコつきの表記になる
    for arg in args:
        print(arg, end=' ')  # Hello world ← タプルとして表示させないためにforループを利用して表示している。
        
    print()


func('hello', 'world')

🔵任意個数のキーワード引数とアンパック
*や**を出力の際につけると中身をすべて表示してくれる。sepオプションをつけなければ間に' 'が入る
これをアンパックっていうらしい

def func(*args, **kwargs):
    print(*args, **kwargs)


func(1, 2, 3, sep='-')

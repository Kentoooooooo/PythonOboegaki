🔵例外
・NameError
  定義されていない変数及び関数を使った時に発生する例外

・TypeError
  意図したデータ型でない場合や、データ型に存在しない変数や関数を参照したときに、例外が発生する。

・IndexError
  リストに存在しないインデックスを指定した場合に発生する例外
  
・KeyError
  辞書型の変数に存在しないキーを指定した場合に発生する例外
  辞書.get()を使ってエラーが出ないように書き換えられる。
  
  num_dict = {'a': 1, 'b': 2}
  
  v = num_dict.get('c')    ← 辞書.get()を使う。キーが存在しない場合はNoneを返す。
  if v:
    print(v)
  else:
    print('そのキーは存在しません')

🔵例外を処理するtry~except
プログラムのどこかで例外が発生すると、そこでプログラムが異常終了してしまう。
⇒ 例外処理を行う；プログラムにう迂回路を作って正規ルートで終了するようにする。

🔵finally節
finally節は例外の発生に関わらず実行される
try:
  pass
except ZeroDivisionError:
  pass
finally:
  pass             ← finally節はエラーの発生に関わらず必ず実行される。
※ 後始末（クリーンアップ動作）に利用される。

・クリーンアップ動作の例
  ファイルを閉じる
  ネットワークへの接続を切断する。
  データベースへの接続を切断する。
  
  🔵raise
  raiseは例外を意図的に発生させる
  
  ・raise文の書き方
    raise ValueErrorのように、raiseの後に発生させたい例外を指定することで任意の例外を意図的に発生できる。
  
  ・raise文を使う場面
    自作した関数で使う
    Pythonが発生させる例外ではない場合で、プログラムの仕様をエラーとして扱いたい場合などに使う
    
  ・例外に引数を渡してエラーの原因を突き止めやすくする
    raise文でエラーを発生させるときに、エラーメッセージを例外の引数にできる。
    エラーメッセージを書いておくことで、例外の発生場所やエラーの原因究明に役立つ。
    
    a = 10
    b = 0
    try:
      result = a / b
    except ZeroDivisionError as e:
      e.args = ('ゼロ除算です。変数を確認してください',)    ← e.argsはタプルを返すので、文字列だけをセットする場合はカンマをつけないと一文字ずつに分かれてします。
      print(e.args)

🔵複数の例外を補足する
Pythonではキーや値が有効なものと仮定して処理を書いて、その過程が間違っていたら例外を処理するというコーディング
スタイルがよく用いられる。
こうしたchordにはtry~excepnt構文が多く使われるという特徴がある。

🔵想定できるエラーは事前に対応する
ゼロを除算してZeroDivisionErrorが起こるプログラムなど、実際にはエラーが想定できる場面では、事前に対応しておくのが良い
if num > 0:
  shiharai = total // num
else:
  print('割り勘人数に0人が設定されました。引数を確認してください。')
このように例外処理よりもチェック処理の方が、どのようなエラーに備えた処理であるかわかりやすい場合もある。

🔵例外処理をしない場合。
全てのエラーに対応しようとすると、膨大な数のtry~except節を追加したりチェック処理を書かないといけない。
そうした場合は、例外処理をせずに、例外を挙げるのが良いでしょう。

🔵やってはいけない例外処理
try:
  answer = a // b
except:
  print('エラーが発生しました')  ← どんなエラーが発生したのかわからない。
  
エラーの原因がわからない。原因が特定できない。
エラーの種類・原因を隠すことを「エラーを握りつぶす」と呼ぶ

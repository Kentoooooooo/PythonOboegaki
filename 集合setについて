🔵集合について
・setはリストやタプルに対して行う  ← set([1, 3, 5])   set(('A', 'C', 'D'))
・setを使うと重複がなくなる
・setを使うと昇順になる

・setはアカウントや権限の管理に使われることがある。

🔵集合の作り方
set_1 = {100, 200, 300, 400, 400}   ← こんな感じで大括弧で囲むと集合ができる

🔵リストから中身の順番を保持しつつ、重複を取り除きたいときの方法
・sortedのkeyとしてindexを利用すると順番が保持されてHAPPY

 a = [1,5,4,7,4,2,7,8,2,3,8,5]
 sorted(set(a), key=a.index)
 
 🔵要素の追加
 set1 = set()         ← 空集合を作成
 tuple1 = ('x', 'y')  ← 追加用のタプル
 
 set1.add(1)          ← addメソッドを利用して追加する
 set1.add(tuple1)

🔵要素の削除
・一つ消す系
  remove      ← set1.remove('A')みたいな感じで要素を指定して削除する
  discard     ← set1.discard('A') removeと同じ要領。
  
  何が違うのか？   ⇒ ズバリ指定した要素がないときの処理。removeは指定した要素が集合に存在しないとエラーを吐く

・集合の要素をランダムに一つだす
 pop()       ← s = set1.pop()  sにset1の要素がランダムに入る。popした要素が集合から消える。どの要素が入るかは決められない。
  
・集合を全削除
 clear()    ← set1.clear()     名前の通りclear(全削除)する
 
 🔵集合の演算
 ・和集合   ⇒ union = set1 | set2
 ・積集合   ⇒ intersection = se1 & set2
 ・差集合   ⇒ difference = set1 - set2
 ・対象差   ⇒ sym_diff = set1 ^ set2
 
 ・包含関係 ⇒ subset_1 = set1 <= set2   ← set1がset2に含まれている場合はsubset_1がTrueになる

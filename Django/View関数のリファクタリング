🔵View関数のリファクタリング
  webアプリケーションを書いているとView関数の実装は大きくなりがち、
  いろいろな処理が入ってしまっていて関数が何をしているのか見通しが悪い。
  
  ここで、View関数の役割を考え直してみましょう
  いわば、HTTPとPythonの世界をつなぐような役割
  ・requestを受け取ってresponseを返す
  ・Form, Model,PaginatorやTemplateを呼び出し・指定する
  
  「検索条件からデータを絞り込む処理」はふさわしくなさそう
  ⇒ ProductSearchFormに処理を任せる
  「検索フォーム」が「検索条件から商品データを絞り込む」処理を持っていても自然。
  
🔵行った処理
  フォームモデル内に検索用の関数を作る。
  この関数はproductsを受け取ってproductsを返す。
  要するに、productsの加工を行う関数。
  
  View関数を煩雑たらしめている処理を、フォームモデル内の関数にお引越し。
  関数が所望の動作をするように少しいじる。
  
  今までは、Formからnameとかの情報をとってくる ⇒ nameとかの情報を元にフィルタリングみたいな流れだったけど
  Form内に関数を設けることで、Formの関数で指定したForm自身の処理を完結させている。
  
  そのため、関数を少しいじる場面では、
  formのところをselfに直したりとかの調整があった。
  
  
🔵ポイント
  どこにコードを書こうが人それぞれだけど
  ポイントとして「役割は何なのか」「誰がどこに依存しているのか」を意識すると
  うまくリファクタリングできるでしょう
  
🔵

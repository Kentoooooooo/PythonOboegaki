🔵変数などをフォーマットして文字列にする書式が3つある。
オススメ順
1．フォーマット済み文字列リテラル(f-string)    f'{1 / 3:.2}'
  頭にfをつけて文字列中に{}でくくった部分を評価して埋め込む
  
  a = 1
  b = 1.2345
  c = dict(key1=123)
  d = 'ABC'
  f'{a} {b:.1f} {c['key1']} {d.lower()}'
  # 1 1.2 123 abc
  
  
2．str.formatメソッド                        '{:.2}'.format(1 /3)
  {}の部分を、順番に引数の値で埋め込む。
  '{0}'.format(v)のように、{}内に数字を書くと、引数の順番によって値を指定できる。
  例えば、'{1} {0}'.format(2, 3)は3 2のように解釈される
  
  a = 1
  b = 1.2345
  c = dict(key1=123)
  d = 'ABC'
  '{} {:.1f} {} {}'.format(a, b, c['key1'], d.lower())
  # 1 1.2 123 abc
  

3．％演算子 C言語と似てる                     '%.2f' % (1 / 3)
  pythonで書く場合は使わない方がいいらしい
  
🔵repr関数とstr関数
・repr関数を任意のオブジェクトをpythonのコードとして評価できる文字列に変換できる。あるいは評価するとエラーになる文字列になる。
  例えば、変換用のメソッドが用意されていないユーザ定義のクラスの場合は'<クラス名 object at アドレス>'のようになる。

・str関数：任意のオブジェクトを人が理解しやすい文字列に変換できる。
  変換用のメソッドが用意されていない場合はreprを実行する

・両者の違い
  print(str('apple\n'))       # apple
  print(repr('apple\n'))      # 'apple\n'
